<div id="cardPaymentBrick_container"></div>
<script>
  const mp = new MercadoPago('YOUR_PUBLIC_KEY', {
    locale: 'pt-BR'
  });
  const bricksBuilder = mp.bricks();
  const renderCardPaymentBrick = async (bricksBuilder) => {
    const settings = {
      initialization: {
        amount: 1000, // valor total a ser pago
        payer: {
          email: "",
        },
      },
      customization: {
        visual: {
          style: {
            theme: 'bootstrap', // | 'dark' | 'bootstrap' | 'flat'
            customVariables: {
            }
          }
        },
          paymentMethods: {
            types: {
              excluded: ['debit_card']
            }, 
            maxInstallments: 1,
          }
      },
      callbacks: {
        onReady: () => {
          // callback chamado quando o Brick estiver pronto
        },
        onSubmit: (cardFormData) => {
          //  callback chamado o usuário clicar no botão de submissão dos dados
          //  exemplo de envio dos dados coletados pelo Brick para seu servidor
          return new Promise((resolve, reject) => {
            fetch("/process_payment", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(cardFormData)
            })
              .then((response) => {
                // receber o resultado do pagamento
                resolve();
              })
              .catch((error) => {
                // lidar com a resposta de erro ao tentar criar o pagamento
                reject();
              })
          });
        },
        onError: (error) => {
          // callback chamado para todos os casos de erro do Brick
        },
      },
    };
    window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
  };
  renderCardPaymentBrick(bricksBuilder);
</script>
    










